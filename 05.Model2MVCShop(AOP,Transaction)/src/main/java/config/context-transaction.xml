<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xsi:schemaLocation=
				"http://www.springframework.org/schema/beans 
				 http://www.springframework.org/schema/beans/spring-beans.xsd
				 http://www.springframework.org/schema/tx 
				 http://www.springframework.org/schema/tx/spring-tx.xsd
				 http://www.springframework.org/schema/aop 
				 http://www.springframework.org/schema/aop/spring-aop.xsd">
				 
				 
	<!-- 이 XML 코드는 Spring에서의 트랜잭션 관리를 위한 설정 파일입니다. -->			
	 
	<!-- PropertyPlaceholderConfigurer 로 로드된 resource 는 ${  } 로 접근 가능 -->
	<!-- PropertyPlaceholderConfigurer 클래스를 이용하여 jdbc.properties 파일에서 데이터베이스 관련 프로퍼티를 로드합니다. -->
	<bean	id="propertyConfigurer"
				class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/jdbc.properties" />
	</bean>

	<!-- DBCP (Apache Commons Database Connection) 사용, 데이터베이스 연결을 설정 -->
	<bean id="dataSource"	
				class="org.apache.commons.dbcp.BasicDataSource" >
		<property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
	</bean>				 
												 
	
	<!-- TransactioManager instance 생성 
		DataSourceTransactionManager 클래스를 이용하여 트랜잭션 매니저 빈을 생성합니다.
		데이터베이스 연결에 사용할 데이터 소스는 앞서 정의한 dataSource 빈을 참조합니다.-->
	<bean id="transactionManager" 
				class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource"/>
	</bean>	
	
	<!-- Transaction Advice 생성 
			:: method : transaction 적용 Method
			:: propagation : transaction 전파규칙(default : REQUIRED)
			:: read-only : 트랜잭션이 읽기만가능 (선택)-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- get 으로 시작된는 Method에 적용 transaction 규칙 -->				
			<tx:method 	name="get*" 			propagation="REQUIRED"	read-only="true" />
			<!-- add 으로 시작된는 Method에 적용 transaction 규칙 -->		
			<tx:method	name="add*"	 		propagation="REQUIRED"/>
			<tx:method	name="update*"	propagation="REQUIRED"/>
			<!--모든 Method에 적용 transaction 규칙 -->		
			<!-- <tx:method	name="*"	 />-->	
		</tx:attributes>
	</tx:advice>

	<!-- AOP : pointcut / advisor 설정 
		aop:pointcut 엘리먼트는 포인트컷을 정의하고, aop:advisor 엘리먼트는 어드바이스와 포인트컷을 연결합니다.
		이 설정에서는 requiredTx 포인트컷을 만들어 특정 패키지의 *ServiceImpl 클래스의 메소드에 트랜잭션 어드바이스를 적용합니다.-->
	<aop:config>
		<aop:pointcut 	id="requiredTx"
									expression="execution(* com.model2.mvc.service..*ServiceImpl.*(..) )" />
		<aop:advisor 	advice-ref="txAdvice"  pointcut-ref="requiredTx"  />
	</aop:config>

</beans>